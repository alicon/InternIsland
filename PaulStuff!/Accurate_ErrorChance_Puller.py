from __future__ import division
__author__ = 'PaulComeau'
debug_dict={'chrchr17_41234637': 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA$AAAAAAAAAAAAA$AAAAAAAAAAAAAAAAAAAAAAAAAAAAA$AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA$AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 'chr}
from collections import OrderedDict
from Small_AccurateError_Functions import name_stripper
from Small_AccurateError_Functions import general_correct_percent

def percent_puller(fastq_dict, num_needed):
    needed_range=range(1, num_needed+1)
    stripped_dict_count=0
    base_location_chance={}
    stripped_dict=name_stripper(general_correct_percent(fastq_dict))
    for num in needed_range:
        float_marker=float(num/num_needed)
        base_location_chance[num]=float_marker
    for num in stripped_dict:
        stripped_dict_count+=1

        print stripped_dict

def Simple_Percent_Puller(fastq_dict, num_needed):
    """
Creates a dictionary for use of the error_producer to fit the error probability of a real fastq
    :param fastq_dict: a dictionary which uses the position of base pairs and it's assinged chance of being a correct base pair
    :param num_needed: the amount of error percentages needed
    :return: dictionary with an assigned intiger and a percentage chance for a base pair at a location to be correct or incorrect
    """
    needed_range=range(1, num_needed+1)
    range_dict={}
    count=1
    base_location_chance={}
    stripped_dict=name_stripper(general_correct_percent(fastq_dict))
    for num in stripped_dict:
        base_location_chance[count]=stripped_dict[num]
        count+=1
    for num in base_location_chance:
        if num in needed_range:
            range_dict[num]=base_location_chance[num]
    return range_dict

print Simple_Percent_Puller(debug_dict, 3)